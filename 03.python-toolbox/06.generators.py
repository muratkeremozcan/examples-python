# List of strings
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']

# [output_if_true | for variable in iterable | if condition]

# List comprehension: stores all elements in memory immediately
fellow1 = [member for member in fellowship if len(member) >= 7]
print(fellow1)

# Generator expression: produces elements on-demand when iterated over (saving memory)
fellow2 = (member for member in fellowship if len(member) >= 7)
print(fellow2)
print(list(fellow2))

##########

# Create a generator object that will produce values from 0 to 30
# Assign the result to result and use num as the iterator variable in the generator expression.
result = (num for num in range(0, 31))

print(next(result))  
print(next(result))  
print(next(result))  
print(next(result))  
print(next(result))  

# # Print the rest of the values
for value in result:
    print(value)


#############

# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister)

# Iterate over and print the values in lengths
for value in lengths:
    print(value)

#  Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
      yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
	print(value)


